{
    "$id": "https://privatekeyvault/meta.schema.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "meta.json schema",
    "description": "Schema for meta.json",
    "type": "object",
    "properties": {
        "tableId": {
            "type": "integer",
            "description": "The unique identifier for this entry in the meta.json table. Value must come from lib.nextId() to ensure uniqueness"
        },
        "table": {
            "type": "object",
            "description": "Contains basic information about the table we are generating code to handle",
            "properties": {
                "tableName": {
                    "type": "string",
                    "description": "Name of the table for which we are generating code to handle.",
                    "default": "singlarCamelCase"
                },
                "directory": {
                    "type": "string",
                    "description": "Path of folder where the table for which we are generating code will reside.",
                    "default": "noForwardSlashAtBeginingOrEnd"
                },
                "addRoutes": {
                    "type": "boolean",
                    "description": "Signals if routes and dependencies should be added to server.js for the code we are generating on behalf of the table defined above.",
                    "default": true
                }
            },
            "required": [
                "tableName",
                "directory",
                "addRoutes"
            ]
        },
        "fields": {
            "type": "object",
            "description": "Metadata here specifies how to generate code to handle fields in the table for which we are generating code.",
            "properties": {
                "newField": {
                    "type": "object",
                    "description": "Name of a field in the table for which we are generating code.",
                    "properties": {
                        "dataType": {
                            "type": "string",
                            "description": "Specifies the dataType of newField",
                            "default": "string",
                            "enum": [
                                "string",
                                "number",
                                "boolean",
                                "array",
                                "object"
                            ]
                        },
                        "unique": {
                            "type": "boolean",
                            "description": "Specifies if values entered into newField must be unique. Make true for foreign key fields",
                            "default": false
                        },
                        "defaultElements": {
                            "type": "object",
                            "description": "Specifies form elements used to populate newField with data for the record in the table for which we are generating code.",
                            "properties": {
                                "parentField": {
                                    "type": "string",
                                    "description": "This value must match the name of the parent field in order for the code generator to function.",
                                    "default": "newField"
                                },
                                "labelText": {
                                    "type": "string",
                                    "description": "This is the label that will be seen on all forms if not overridden by specifications further down in this form.",
                                    "default": "Label for newField"
                                },
                                "elementType": {
                                    "type": "string",
                                    "description": "Specifies the default control that will be used on the generated webpages to aquire user input. These may be overriddent by specifcations further down in this form.",
                                    "default": "input",
                                    "enum": [
                                        "input",
                                        "select",
                                        "textarea",
                                        "button",
                                        "datalist"
                                    ]
                                }
                            },
                            "allOf": [
                                {
                                    "if": {
                                        "properties": {
                                            "elementType": {
                                                "const": "input"
                                            }
                                        }
                                    },
                                    "then": {
                                        "properties": {
                                            "attributes": {
                                                "type": "object",
                                                "description": "Specifies HTML attributes of form elements used to populate newField with data for the record in the table for which we are generating code.",
                                                "properties": {
                                                    "type": {
                                                        "type": "string",
                                                        "description": "Normally to specify the type of input.",
                                                        "enum": [
                                                            "button",
                                                            "checkbox",
                                                            "color",
                                                            "email",
                                                            "file",
                                                            "hidden",
                                                            "image",
                                                            "month",
                                                            "number",
                                                            "password",
                                                            "radio",
                                                            "range",
                                                            "reset",
                                                            "search",
                                                            "tel",
                                                            "text",
                                                            "time",
                                                            "url",
                                                            "week"
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "elementType": {
                                                "const": "select"
                                            }
                                        }
                                    },
                                    "then": {
                                        "properties": {
                                            "attributes": {
                                                "selectPlaceHolderForNow": "select attributes will go here later."
                                            }
                                        }
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "elementType": {
                                                "const": "textarea"
                                            }
                                        }
                                    },
                                    "then": {
                                        "properties": {
                                            "attributes": {
                                                "textareaPlaceHolderForNow": "textarea attributes will go here later."
                                            }
                                        }
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "elementType": {
                                                "const": "button"
                                            }
                                        }
                                    },
                                    "then": {
                                        "properties": {
                                            "attributes": {
                                                "buttonPlaceHolderForNow": "button attributes will go here later."
                                            }
                                        }
                                    }
                                }
                            ]
                        },
                        "calculation": {
                            "type": "object",
                            "description": "Specifies calculations used on defaultElements to produce data for newField. Like hashing a user supplied password and saving the hashed password",
                            "properties": {
                                "placeHolderForNow": {}
                            }
                        }
                    }
                }
            },
            "required": [
                "newField"
            ]
        },
        "apiHandlers": {
            "type": "object",
            "description": "metadata describes how to generate code for apiHandlers if there are any special considerations."
        },
        "pageHandlers": {
            "type": "object",
            "description": "metadata describes how to generate code for pageHandlers if there are any special considerations."
        },
        "webPages": {
            "type": "object",
            "description": "metadata describes how to generate webpages and supporting code for interacting with the table for which we are generating code"
        },
        "timeStamp": {
            "type": "integer",
            "description": "This field tells when a record in metadata.json has been created. Value should be provided by Date.now()"
        },
        "deleted": {
            "type": "boolean",
            "description": "This field tells if a record in metadata.json has been deleted."
        }
    },
    "required": [
        "tableId",
        "table",
        "fields",
        "apiHandlers",
        "pageHandlers",
        "webPages",
        "timeStamp",
        "deleted"
    ]
}