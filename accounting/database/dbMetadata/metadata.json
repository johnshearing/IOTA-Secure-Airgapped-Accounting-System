{"tableId":1285,"table":{"tableName":"user","directory":"database/dbPermission/user"},"fields":{"email":{"dataType":"string","unique":true,"published":true,"defaultElements":{"email":{"parentField":"email","labelText":"Email","elementType":"input","attributes":{"type":"text"},"validation":{"default":{},"post":{"passIfString":"","passIfNotEmpty":"","passIfHasAmpersand":"// Behavior from data dictionary at uet9z3uuzgy5hmytmsxf \n  if(email.indexOf(\"@\") === -1){return callback(400, {'Error' : 'Not a valid email'});}"},"put":{"stringTypeTrimAmpersand":"// Behavior from data dictionary at og5gtmcsk6od74wkr9vj \n  // If email is of string type and is not empty \n  if (typeof(email) === 'string' && email.trim().length > 0) \n  { \n    // The user entered something in the edit form so check for an ampersand. \n    if(email.indexOf('@') != -1) \n    { \n      // pass if ampersand \n      email = email.trim() \n    } \n    else // No ampersand so reject the edit. \n    { \n      return callback(400, {'Error' : 'Not a valid email'}); \n    } \n  } \n  // Else, the user may have entered some other datatype like a number or \n  // perhaps nothing at all if using the Delete form or the Password form. \n  else \n  { \n    // If the user entered nothing: \n    if(email === undefined) \n    { \n      // Then user is trying to delete a record or change the password \n      email = false \n    } \n    else // The user entered something invalid so reject the edit. \n    { \n      return callback(400, {'Error' : 'Not a valid email'}); \n    } \n  }"},"get":{}}}}},"hashedPassword":{"dataType":"string","unique":false,"published":false,"defaultElements":{"password":{"parentField":"hashedPassword","labelText":"Choose a Password","elementType":"input","attributes":{"type":"password","placeholder":"Use random characters."},"validation":{"default":{},"post":{"passIfString":"","passIfNotEmpty":"// Behavior from data dictionary at bet9z4ufzg97hmfdhmxt \n  if(!password){return callback(400, {'Error' : 'No password was entered'});}","passIfHasNumber":"// Behavior from data dictionary at 5et9z9uuzgy5hmfdmmxf \n  // declare a function used to check if the password has a number in it. \n  function passwordDoesNotHaveNumber (password) \n  { \n    let str = String(password); \n\n    for( let i = 0; i < str.length; i++) \n    { \n      if(!isNaN(str.charAt(i))) \n      { \n        return false; \n        break; \n      } \n    } \n    return true; \n  }; \n\n  if(passwordDoesNotHaveNumber(password)){return callback(400, {'Error' : 'password must contain a number.'});}; "},"put":{"passwordValidation":"// Behavior from data dictionary at e09hmheqvsxzbi50n4ny \n  // If password is of string type and is not empty \n  if (typeof(password) === 'string' && password.trim().length > 0) \n  { \n    // The user entered something in the password form so check that the \n    // user put a number in the password to make it more secure. \n    // Start out assuming that there is no number in the password. \n\n    // declare a function used to check if the password has a number in it. \n    function passwordHasNumber (password) \n    { \n      let str = String(password); \n\n      for( let i = 0; i < str.length; i++) \n      { \n        if(!isNaN(str.charAt(i))) \n        { \n          return true; \n          break; \n        } \n      } \n\n      return false; \n    }; \n\n    if(passwordHasNumber(password)) \n    { \n      // If we are here then the user inserted a number in the password. \n      // There is no need to do anything but let it pass through as is. \n      // Notice we are not trimming the password. \n      // If the user wants white space in the password, that's ok. \n    } \n    else // No number in the password so reject the edit. \n    { \n      return callback(400, {'Error' : 'password must contain a number.'}); \n    } \n  } \n  // Else, the user may have entered some other datatype like an array or \n  // perhaps nothing at all if using the Delete form or the Edit form. \n  else \n  { \n    // If the user entered nothing: \n    if(password === undefined) \n    { \n      // Then user is using the Delete form or the Edit form. \n      password = false \n    } \n    else // The user entered something invalid so reject the edit. \n    { \n      return callback(400, {'Error' : 'Not a valid password'}); \n    } \n  }"},"get":{}}}},"calculation":{"putHandlerPreprocessing":"      // Password calculation from data dictionary at jet9znuuzg95hmfdmmx5 is processed here.\n          // Hash the password\n          let hashedPassword = helpers.hash(password);\n\n          // If the password was not hashed successfully then exit this process without appending the record.\n          if(!hashedPassword)\n          {\n            helpers.log\n            (\n              5,\n              'jet9znuuzg95hmfdmmx5' + '\\n' +\n              'Could not hash the password' + '\\n'\n            ); // End of: helpers.log(...)\n\n            return callback(500, {'Error' : 'Could not hash the password'});\n          } // End of: else the password was not hashed successfully.\n","postHandlerPreprocessing":"// Password calculation from data dictionary at het9z9uuzgy5hmfwdgkz is processed here.\n    // Hash the password\n    let hashedPassword = helpers.hash(password);\n\n    // If the password was not hashed successfully then exit this process without appending the record.\n    if(!hashedPassword)\n    {\n      helpers.log\n      (\n        5,\n        'het9z9uuzgy5hmfwdgkz' + '\\n' +\n        'Could not hash the password' + '\\n'\n      ); // End of: helpers.log(...)\n\n      return callback(500, {'Error' : 'Could not hash the password'});\n    } // End of: else the password was not hashed successfully.\n\n"}}},"apiHandlers":{"get":{},"post":{},"put":{}},"pageHandlers":{"list":{},"add":{},"edit":{}},"webPages":{"addPage":{"heading":"Create A New Account","forms":{"addForm":{"heading":"Use a password with completly random characters","submitButtonText":"Create User","formElements":{"email":{"labelText":"Email Address","attributes":{"placeholder":"alice@gmail.com"}},"password":{"attributes":{"placeholder":"Use random symbols"}}}}}},"listPage":{"heading":"SELECT, FILTER, AND SORT, USERS","forms":{"listForm":{"heading":"\n  All records are returned in order of creation if no selections are made</br>\n  Press the submit button to see the results\n"}}},"editPage":{"heading":"User's Settings","forms":{"editForm":{"heading":"Edit User's Account Settings","successMessage":"Your Changes Have Been Saved","submitButtonText":"Save Changes","formElements":{"email":{}}},"passwordForm":{"heading":"Change Password","successMessage":"New Password Has Been Saved","submitButtonText":"Change Password","formElements":{"password":{"attributes":{"placeholder":"Make it a good one"}}}},"deleteForm":{"heading":"Delete User","submitButtonText":"Delete User"}}}},"timeStamp":1575591056641,"deleted":false}